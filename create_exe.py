#!/usr/bin/env python3
"""
Script pour cr√©er un executable Windows (.exe) du Pokemon Dataset Generator
Utilise PyInstaller pour empaqueter l'application compl√®te
"""
import os
import sys
import subprocess
import shutil
from pathlib import Path

def check_pyinstaller():
    """V√©rifie si PyInstaller est install√©"""
    try:
        import PyInstaller
        print("‚úÖ PyInstaller est install√©")
        return True
    except ImportError:
        print("‚ùå PyInstaller n'est pas install√©")
        print("\nüì¶ Installation de PyInstaller...")
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", "pyinstaller"])
            print("‚úÖ PyInstaller install√© avec succ√®s")
            return True
        except:
            print("‚ùå Erreur lors de l'installation de PyInstaller")
            return False

def clean_build_folders():
    """Nettoie les dossiers de build pr√©c√©dents"""
    folders_to_clean = ['build', 'dist', '__pycache__']
    files_to_clean = ['*.spec']
    
    print("\nüßπ Nettoyage des fichiers de build pr√©c√©dents...")
    
    for folder in folders_to_clean:
        if os.path.exists(folder):
            try:
                shutil.rmtree(folder)
                print(f"   Supprim√© : {folder}/")
            except:
                print(f"   ‚ö†Ô∏è  Impossible de supprimer : {folder}/")
    
    for pattern in files_to_clean:
        for file in Path('.').glob(pattern):
            try:
                file.unlink()
                print(f"   Supprim√© : {file}")
            except:
                print(f"   ‚ö†Ô∏è  Impossible de supprimer : {file}")

def create_exe():
    """Cr√©e l'executable avec PyInstaller"""
    print("\nüî® Cr√©ation de l'executable...")
    print("‚è≥ Cela peut prendre plusieurs minutes...\n")
    
    # Options PyInstaller
    cmd = [
        sys.executable,
        "-m", "PyInstaller",
        "--name=Pokemon_Dataset_Generator",
        "--onefile",                    # Un seul fichier exe
        "--windowed",                   # Pas de console (mode GUI)
        "--icon=NONE",                  # Pas d'ic√¥ne (ou sp√©cifiez un .ico)
        "--add-data=cards_info.xlsx;.", # Inclure le fichier Excel
        "--add-data=gui_config.json;.", # Inclure la config (si existe)
        "--hidden-import=cv2",
        "--hidden-import=pandas",
        "--hidden-import=numpy",
        "--hidden-import=imgaug",
        "--hidden-import=PIL",
        "--hidden-import=openpyxl",
        "--hidden-import=tkinter",
        "--collect-all=imgaug",
        "--collect-all=imagecorruptions",
        "GUI_v2.py"
    ]
    
    try:
        subprocess.check_call(cmd)
        print("\n‚úÖ Executable cr√©√© avec succ√®s !")
        return True
    except subprocess.CalledProcessError as e:
        print(f"\n‚ùå Erreur lors de la cr√©ation de l'executable : {e}")
        return False

def create_portable_package():
    """Cr√©e un package portable avec l'exe et les fichiers n√©cessaires"""
    print("\nüì¶ Cr√©ation du package portable...")
    
    package_name = "Pokemon_Dataset_Generator_Portable"
    package_dir = Path("dist") / package_name
    
    if package_dir.exists():
        shutil.rmtree(package_dir)
    
    package_dir.mkdir(parents=True, exist_ok=True)
    
    # Copier l'exe
    exe_source = Path("dist") / "Pokemon_Dataset_Generator.exe"
    if exe_source.exists():
        shutil.copy(exe_source, package_dir / "Pokemon_Dataset_Generator.exe")
        print(f"   ‚úÖ Copi√© : Pokemon_Dataset_Generator.exe")
    
    # Cr√©er les dossiers n√©cessaires
    folders = ["images", "output", "examples", "fakeimg", "fakeimg_augmented"]
    for folder in folders:
        (package_dir / folder).mkdir(exist_ok=True)
        # Ajouter un .gitkeep
        (package_dir / folder / ".gitkeep").write_text("")
        print(f"   ‚úÖ Cr√©√© : {folder}/")
    
    # Copier les fichiers essentiels
    files_to_copy = [
        "cards_info.xlsx",
        "README.md",
        "requirements.txt"
    ]
    
    for file in files_to_copy:
        if os.path.exists(file):
            shutil.copy(file, package_dir / file)
            print(f"   ‚úÖ Copi√© : {file}")
    
    # Cr√©er un README pour le package
    readme_content = """# Pokemon Dataset Generator - Version Portable

## üöÄ Lancement Rapide

Double-cliquez sur : **Pokemon_Dataset_Generator.exe**

## üìÇ Structure

- **Pokemon_Dataset_Generator.exe** : Application principale
- **images/** : Placez vos cartes Pokemon ici (format: SSP_XXX_*.png)
- **cards_info.xlsx** : Fichier Excel avec les informations des cartes
- **output/** : Dossiers de sortie (g√©n√©r√©s automatiquement)
  - augmented/ : Images augment√©es
  - yolov8/ : Mosa√Øques et annotations YOLO
- **fakeimg/** : Fausses cartes (g√©n√©r√©es)
- **fakeimg_augmented/** : Fausses cartes augment√©es (g√©n√©r√©es)

## üìñ Documentation

Voir README.md pour la documentation compl√®te.

## ‚ö†Ô∏è Note

Cette version portable inclut toutes les d√©pendances n√©cessaires.
Aucune installation de Python requise !

## üêõ R√©solution de Probl√®mes

Si l'application ne d√©marre pas :
1. V√©rifiez que cards_info.xlsx est pr√©sent
2. Assurez-vous d'avoir des droits d'√©criture dans le dossier
3. Consultez README.md pour plus d'informations

Version : 2.0.1
"""
    
    (package_dir / "README_PORTABLE.txt").write_text(readme_content, encoding='utf-8')
    print(f"   ‚úÖ Cr√©√© : README_PORTABLE.txt")
    
    print(f"\n‚úÖ Package portable cr√©√© dans : {package_dir}/")
    print(f"\nüì¶ Vous pouvez zipper ce dossier pour distribution")

def main():
    print("=" * 60)
    print(" üéÆ Pokemon Dataset Generator - Cr√©ation d'Executable")
    print("=" * 60)
    print()
    
    # V√©rifier qu'on est dans le bon dossier
    if not os.path.exists("GUI_v2.py"):
        print("‚ùå Erreur : GUI_v2.py non trouv√©")
        print("   Lancez ce script depuis le dossier Pokemons/")
        input("\nAppuyez sur Entr√©e pour quitter...")
        return
    
    # V√©rifier/Installer PyInstaller
    if not check_pyinstaller():
        input("\nAppuyez sur Entr√©e pour quitter...")
        return
    
    # Nettoyer les builds pr√©c√©dents
    clean_build_folders()
    
    # Cr√©er l'executable
    if not create_exe():
        input("\nAppuyez sur Entr√©e pour quitter...")
        return
    
    # Cr√©er le package portable
    create_portable_package()
    
    print("\n" + "=" * 60)
    print(" ‚úÖ TERMIN√â !")
    print("=" * 60)
    print()
    print("üìÇ Fichiers g√©n√©r√©s :")
    print("   - dist/Pokemon_Dataset_Generator.exe (executable seul)")
    print("   - dist/Pokemon_Dataset_Generator_Portable/ (package complet)")
    print()
    print("üí° Conseil : Testez l'executable avant distribution")
    print()
    
    input("Appuyez sur Entr√©e pour quitter...")

if __name__ == "__main__":
    main()
